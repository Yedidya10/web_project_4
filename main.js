!function(){"use strict";class e{constructor(e,t){let{handleCardClick:s}=t;var n,r;r=()=>{this._cardElement.remove(),this._cardElement=null},(n="_handleDelete")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._name=e.name,this._link=e.link,this._cardSelector=document.querySelector("#card-template").content,this._handleCardClick=s}_getCardTemplate(){return this._cardSelector.querySelector(".card").cloneNode(!0)}createCard(){this._cardElement=this._getCardTemplate();const e=this._cardElement.querySelector(".card__image"),t={src:this._link,alt:this._name};return e.setAttribute("src",t.src),e.setAttribute("alt",t.alt),this._cardElement.querySelector(".card__name").textContent=this._name,this._setLikeButtonHandler(),this._setTrashButtonHandler(),this._setHandleCardClick(e,t),this._cardElement}_setHandleCardClick(e,t){e.addEventListener("click",(()=>{this._handleCardClick(t)}))}_handleLike(e){e.target.classList.toggle("card__like_active")}_setLikeButtonHandler(){this._cardElement.querySelector(".card__like").addEventListener("click",this._handleLike)}_setTrashButtonHandler(){this._cardElement.querySelector(".card__trash").addEventListener("click",this._handleDelete)}}class t{constructor(e,t){var s,n;n=(e,t)=>{const s=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)},(s="_showInputError")in this?Object.defineProperty(this,s,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[s]=n,this._settings=e,this._form=t}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._form.querySelector(this._settings.submitButtonSelector),this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this.toggleButtonState(),this._checkInputValidity(e)}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class r{constructor(e){n(this,"_handleMouseClosePopup",(e=>{e.target===this.popup&&this.closePopup()})),n(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.closePopup()})),this.popup=e,this.closePopup=this.closePopup.bind(this),this.openPopup=this.openPopup.bind(this),this.setEventListeners=this.setEventListeners.bind(this),this.removeEventListeners=this.removeEventListeners.bind(this)}setEventListeners(){this._closePopupButton=this.popup.querySelector(".popup__close"),this._closePopupButton.addEventListener("click",this.closePopup),document.addEventListener("mousedown",this._handleMouseClosePopup),document.addEventListener("keydown",this._handleEscClose)}removeEventListeners(){this._closePopupButton.removeEventListener("click",this.closePopup),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleMouseClosePopup)}openPopup(){this.popup.classList.add("popup_opened"),this.setEventListeners()}closePopup(){this.removeEventListeners(),this.popup.classList.remove("popup_opened")}}function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class o extends r{constructor(e,t){let{handleSubmit:s}=t;super(e),i(this,"_getInputsValue",(()=>{const e={},t=this.popup.querySelectorAll(".form__input");for(const s of t)e[s.name]=s.value;return console.log(e),e})),i(this,"_handleSubmitListener",(()=>{this._handleSubmit(this._getInputsValue())})),i(this,"setEventListeners",(()=>{super.setEventListeners(),this.popup.querySelector(".form").addEventListener("submit",this._handleSubmitListener)})),i(this,"removeEventListeners",(()=>{super.removeEventListeners(),this.popup.querySelector(".form").removeEventListener("submit",this._handleSubmitListener)})),i(this,"closePopup",(()=>{super.closePopup(),this.removeEventListeners(),this.popup.querySelector(".form").reset()})),this._handleSubmit=s}}class a extends r{constructor(e){var t,s;super(e),s=e=>{super.openPopup(),this.popup.querySelector(".popup__image").src=e.src,this.popup.querySelector(".popup__image").alt=e.alt,this.popup.querySelector(".popup__name").textContent=e.alt},(t="openPopup")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s}}const l={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},u=document.querySelector(".profile__edit"),c=document.querySelector("#edit-profile-popup"),p=c.querySelector("#edit-profile-form"),d=document.querySelector(".profile__name"),h=document.querySelector(".profile__about-me"),m=p.querySelector("#name"),_=p.querySelector("#about-me"),v=document.querySelector(".profile__add-card"),b=document.querySelector("#add-place-popup"),E=document.querySelector("#add-place-form"),L=document.querySelector("#image-popup"),y=new class{constructor(e,t){s(this,"getUserInfo",(()=>({name:this._userName.textContent,job:this._userJob.textContent}))),s(this,"setUserInfo",(e=>{this._userName.textContent=e.name,this._userJob.textContent=e.job})),this._userName=e,this._userJob=t}}(d,h),f=new t(l,p);f.enableValidation();const S=new t(l,E);S.enableValidation();const g=t=>new e(t,{handleCardClick:e=>{const t=new a(L);t.openPopup(e),t.setEventListeners()}}).createCard(),C=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach(this._renderer)}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>{const t=g(e);C.addItem(t)}},".cards");C.renderItems();const k=new o(b,{handleSubmit:e=>{const t={name:e.title,link:e.url},s=g(t);C.addItem(s),k.closePopup()}}),P=new o(c,{handleSubmit:e=>{const t={name:e.name,job:e.about};y.setUserInfo(t),P.closePopup()}});v.addEventListener("click",(()=>{k.openPopup(),S.toggleButtonState()})),u.addEventListener("click",(()=>{P.openPopup(),(()=>{const{name:e,job:t}=y.getUserInfo();m.value=e,_.value=t})(),f.toggleButtonState()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,